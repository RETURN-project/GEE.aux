df_rec <- cbind(dat_tidy[,auxcols], df_fr)
id <- which(df_rec$R80P == max(df_rec$R80P, na.rm = T))
dat <- getPlotData(id)
plot_aux(dts, dat$obsi,id, dat$lossdt_start,dat$lossdt_end,dat$lossdt_start1,dat$lossdt_end1,
dat$trend,dat$met_rri,dat$met_r80p,dat$met_yryr)
R80P_vals <- df_rec$R80P[!is.na(df_rec$R80P)]
R80P_med <- R80P_vals[rank(R80P_vals) == floor(length(R80P_vals)/2)]
id <- which(df_rec$R80P == R80P_med)
dat <- getPlotData(id)
plot_aux(dts, dat$obsi,id, dat$lossdt_start,dat$lossdt_end,dat$lossdt_start1,dat$lossdt_end1,
dat$trend,dat$met_rri,dat$met_r80p,dat$met_yryr)
id <- which(df_rec$R80P == min(df_rec$R80P, na.rm = T))
dat <- getPlotData(id)
plot_aux(dts, dat$obsi,id, dat$lossdt_start,dat$lossdt_end,dat$lossdt_start1,dat$lossdt_end1,
dat$trend,dat$met_rri,dat$met_r80p,dat$met_yryr)
i
dtdist <- as.Date(paste0(as.character(2000+as.numeric(df_out$lossyr[i])),'-06-01'))
tdist <- which(dts == dtdist)
# trend component of piecewise regression
tsi <- seg[[i]]$trend
# breakpoints of piecewise regression
tbp <- seg[[i]]$breakpoints
tbp <- tbp[tbp!=0 & tbp!=length(tsi)]
totbp <- tbp
if(maxBreak){
# Find the major break
dbr <- trf[tbp+1]-trf[tbp]
tbp <- tbp[which(abs(dbr) == max(abs(dbr)))]
tbp <- tbp[1]
}else{
# Use the break closest to the disturbance date
dbr <- tbp-tdist
tbp <- tbp[which(abs(dbr) == min(abs(dbr)))]
tbp <- tbp[1]
}
tbp
timeChck <- ((min(abs(dbr))/obspyr) < timeThres)
timeChck
install()
df_fr <- data.frame(do.call(rbind.data.frame, lapply(1:nts,function(i){
# get observation number of reported disturbance
dtdist <- as.Date(paste0(as.character(2000+as.numeric(df_out$lossyr[i])),'-06-01'))
tdist <- which(dts == dtdist)
# trend component of piecewise regression
tsi <- seg[[i]]$trend
# breakpoints of piecewise regression
tbp <- seg[[i]]$breakpoints
tbp <- tbp[tbp!=0 & tbp!=length(tsi)]
# calculate recovery metrics
calcRecMetrics(tsi, tdist, obspyr, nPre, nDist, nPost, nPostStart, nDelta, nDeltaStart,
tbp, maxBreak, chkBrk, timeThres)})))
# add auxiliary data to the dataframe
df_rec <- cbind(dat_tidy[,auxcols], df_fr)
id
id = 1154
dat <- getPlotData(id)
plot_aux(dts, dat$obsi,id, dat$lossdt_start,dat$lossdt_end,dat$lossdt_start1,dat$lossdt_end1,
dat$trend,dat$met_rri,dat$met_r80p,dat$met_yryr)
fracRRI <- sum(!is.na(df_rec$RRI))/length(df_rec$RRI)
fracR80p <- sum(!is.na(df_rec$R80P))/length(df_rec$R80P)
fracYrYr <- sum(!is.na(df_rec$YrYr))/length(df_rec$YrYr)
id <- which(df_rec$RRI == max(df_rec$RRI, na.rm = T))
dat <- getPlotData(id)
plot_aux(dts, dat$obsi,id, dat$lossdt_start,dat$lossdt_end,dat$lossdt_start1,dat$lossdt_end1,
dat$trend,dat$met_rri,dat$met_r80p,dat$met_yryr)
RRI_vals <- df_rec$RRI[!is.na(df_rec$RRI)]
RRI_med <- RRI_vals[rank(RRI_vals) == length(RRI_vals)/2]
id <- which(df_rec$RRI == RRI_med)
dat <- getPlotData(id)
plot_aux(dts, dat$obsi,id, dat$lossdt_start,dat$lossdt_end,dat$lossdt_start1,dat$lossdt_end1,
dat$trend,dat$met_rri,dat$met_r80p,dat$met_yryr)
id <- which(df_rec$RRI == min(df_rec$RRI, na.rm = T))
dat <- getPlotData(id)
plot_aux(dts, dat$obsi,id, dat$lossdt_start,dat$lossdt_end,dat$lossdt_start1,dat$lossdt_end1,
dat$trend,dat$met_rri,dat$met_r80p,dat$met_yryr)
id <- which(df_rec$RRI == max(df_rec$RRI, na.rm = T))
dat <- getPlotData(id)
plot_aux(dts, dat$obsi,id, dat$lossdt_start,dat$lossdt_end,dat$lossdt_start1,dat$lossdt_end1,
dat$trend,dat$met_rri,dat$met_r80p,dat$met_yryr)
RRI_vals <- df_rec$RRI[!is.na(df_rec$RRI)]
RRI_med <- RRI_vals[rank(RRI_vals) == length(RRI_vals)/2]
id <- which(df_rec$RRI == RRI_med)
dat <- getPlotData(id)
plot_aux(dts, dat$obsi,id, dat$lossdt_start,dat$lossdt_end,dat$lossdt_start1,dat$lossdt_end1,
dat$trend,dat$met_rri,dat$met_r80p,dat$met_yryr)
id
RRI_vals <- df_rec$RRI[!is.na(df_rec$RRI)]
RRI_med <- RRI_vals[rank(RRI_vals) == length(RRI_vals)/2]
RRI_vals <- df_rec$RRI[!is.na(df_rec$RRI)]
RRI_med <- RRI_vals[rank(RRI_vals) == floor(length(RRI_vals)/2)]
id <- which(df_rec$RRI == RRI_med)
dat <- getPlotData(id)
plot_aux(dts, dat$obsi,id, dat$lossdt_start,dat$lossdt_end,dat$lossdt_start1,dat$lossdt_end1,
dat$trend,dat$met_rri,dat$met_r80p,dat$met_yryr)
id <- which(df_rec$RRI == max(df_rec$RRI, na.rm = T))
dat <- getPlotData(id)
plot_aux(dts, dat$obsi,id, dat$lossdt_start,dat$lossdt_end,dat$lossdt_start1,dat$lossdt_end1,
dat$trend,dat$met_rri,dat$met_r80p,dat$met_yryr)
RRI_vals <- df_rec$RRI[!is.na(df_rec$RRI)]
RRI_med <- RRI_vals[rank(RRI_vals) == floor(length(RRI_vals)/2)]
id <- which(df_rec$RRI == RRI_med)
dat <- getPlotData(id)
plot_aux(dts, dat$obsi,id, dat$lossdt_start,dat$lossdt_end,dat$lossdt_start1,dat$lossdt_end1,
dat$trend,dat$met_rri,dat$met_r80p,dat$met_yryr)
id <- which(df_rec$RRI == min(df_rec$RRI, na.rm = T))
dat <- getPlotData(id)
plot_aux(dts, dat$obsi,id, dat$lossdt_start,dat$lossdt_end,dat$lossdt_start1,dat$lossdt_end1,
dat$trend,dat$met_rri,dat$met_r80p,dat$met_yryr)
id <- which(df_rec$RRI == max(df_rec$RRI, na.rm = T))
dat <- getPlotData(id)
plot_aux(dts, dat$obsi,id, dat$lossdt_start,dat$lossdt_end,dat$lossdt_start1,dat$lossdt_end1,
dat$trend,dat$met_rri,dat$met_r80p,dat$met_yryr)
RRI_vals <- df_rec$RRI[!is.na(df_rec$RRI)]
RRI_med <- RRI_vals[rank(RRI_vals) == floor(length(RRI_vals)/2)]
id <- which(df_rec$RRI == RRI_med)
dat <- getPlotData(id)
plot_aux(dts, dat$obsi,id, dat$lossdt_start,dat$lossdt_end,dat$lossdt_start1,dat$lossdt_end1,
dat$trend,dat$met_rri,dat$met_r80p,dat$met_yryr)
id <- which(df_rec$RRI == min(df_rec$RRI, na.rm = T))
dat <- getPlotData(id)
plot_aux(dts, dat$obsi,id, dat$lossdt_start,dat$lossdt_end,dat$lossdt_start1,dat$lossdt_end1,
dat$trend,dat$met_rri,dat$met_r80p,dat$met_yryr)
id <- which(df_rec$R80P == max(df_rec$R80P, na.rm = T))
dat <- getPlotData(id)
plot_aux(dts, dat$obsi,id, dat$lossdt_start,dat$lossdt_end,dat$lossdt_start1,dat$lossdt_end1,
dat$trend,dat$met_rri,dat$met_r80p,dat$met_yryr)
R80P_vals <- df_rec$R80P[!is.na(df_rec$R80P)]
R80P_med <- R80P_vals[rank(R80P_vals) == floor(length(R80P_vals)/2)]
id <- which(df_rec$R80P == R80P_med)
dat <- getPlotData(id)
plot_aux(dts, dat$obsi,id, dat$lossdt_start,dat$lossdt_end,dat$lossdt_start1,dat$lossdt_end1,
dat$trend,dat$met_rri,dat$met_r80p,dat$met_yryr)
id <- which(df_rec$R80P == min(df_rec$R80P, na.rm = T))
dat <- getPlotData(id)
plot_aux(dts, dat$obsi,id, dat$lossdt_start,dat$lossdt_end,dat$lossdt_start1,dat$lossdt_end1,
dat$trend,dat$met_rri,dat$met_r80p,dat$met_yryr)
id <- which(df_rec$YrYr == max(df_rec$YrYr, na.rm = T))
dat <- getPlotData(id)
plot_aux(dts, dat$obsi,id, dat$lossdt_start,dat$lossdt_end,dat$lossdt_start1,dat$lossdt_end1,
dat$trend,dat$met_rri,dat$met_r80p,dat$met_yryr)
id <- which(df_rec$YrYr == min(df_rec$YrYr, na.rm = T))
dat <- getPlotData(id)
plot_aux(dts, dat$obsi,id, dat$lossdt_start,dat$lossdt_end,dat$lossdt_start1,dat$lossdt_end1,
dat$trend,dat$met_rri,dat$met_r80p,dat$met_yryr)
id <- which(df_rec$YrYr == median(df_rec$YrYr, na.rm = T))
dat <- getPlotData(id)
plot_aux(dts, dat$obsi,id, dat$lossdt_start,dat$lossdt_end,dat$lossdt_start1,dat$lossdt_end1,
dat$trend,dat$met_rri,dat$met_r80p,dat$met_yryr)
library(zoo)
library(GEE.aux)
library(tidyverse)
library(bfast)
library(strucchange)
knitr::opts_chunk$set(echo = TRUE)
library(zoo)
library(GEE.aux)
library(tidyverse)
library(bfast)
library(strucchange)
# path to folder with data
ifolder <- '../inst/testdata/'
# path to folder where outputs should be stored
ofolder <- '../inst/testdata/'
# name of data files
ifile <- 'test2.csv'
obspyr <- 12
nPre <- 2
nDist <- 1
nPost <- 2
nPostStart <- 4
nDelta <- 2
nDeltaStart <- 4
maxBreak <- T
chkBrk <- T
timeThres <- 1.5
load(file = file.path(ifolder,  paste0('rec_', tools::file_path_sans_ext(ifile), '.Rdata')))
load(file = file.path('/inst/testdata',  paste0('rec_', tools::file_path_sans_ext(ifile), '.Rdata')))
getwd()
load(file = file.path('/inst/testdata/',  paste0('rec_', tools::file_path_sans_ext(ifile), '.Rdata')))
file.path('/inst/testdata/',  paste0('rec_', tools::file_path_sans_ext(ifile), '.Rdata'))
load(file = file.path('/inst/testdata/',  paste0('rec_', tools::file_path_sans_ext(ifile), '.Rdata')))
getwd()
load(file = file.path('/home/wanda/Documents/Rscripts/GEE.aux/inst/testdata/',  paste0('rec_', tools::file_path_sans_ext(ifile), '.Rdata')))
load(file = file.path('/home/wanda/Documents/Rscripts/GEE.aux/inst/testdata/',  paste0('reg_', tools::file_path_sans_ext(ifile), '.Rdata')))
load(file = file.path('/home/wanda/Documents/Rscripts/GEE.aux/inst/testdata/',  paste0('seg_', tools::file_path_sans_ext(ifile), '.Rdata')))
library(sf)
library(raster)
temp <- str_split(df_rec$coords, ", ")
lon <- as.numeric(unlist(lapply(temp, function(x) x[1])))
lat <- as.numeric(unlist(lapply(temp, function(x) x[2])))
del('temp')
df_rec$lat <- lat
df_rec$lon <- lon
coordinates(df_rec) <- ~lon+lat
proj4string(df_rec) <- CRS("+init=epsg:4326")
df_rec <- st_as_sf(df_rec,coords = c('lon','lat'))
rm(temp)
br <- st_as_sf(getData('GADM', country = 'BRA', level = 2))# retrieve data
br <- st_transform(br, crs =  crs(df_rec))# convert CRS
plot(df_rec[,c('RRI')])
plot(df_rec$RRI)
plot(df_rec)
View(df_rec)
plot(df_rec$RRI)
plot(df_rec)
df_reg
df_rec
plot(df_rec['RRI'])
plot(br)
# Vector of Brazilian borders
br <- st_as_sf(getData('GADM', country = 'BRA', level = 1))# retrieve data
br <- st_as_sf(getData('GADM', country = 'BRA', level = 1))# retrieve data
br <- st_transform(br, crs =  crs(df_rec))# convert CRS
#generate plot
plot(st_geometry(br), add = T)
t
#generate plot
plot(st_geometry(br))
#generate plot
plot(st_geometry(br))
plot(st_geometry(br))
plot(df_rec['RRI'], add = T)
plot(df_rec[c('RRI','YrYr')], add = T)
plot(st_geometry(br))
plot(df_rec[c('RRI','YrYr')], add = T)
plot(st_geometry(br), axes = TRUE)
plot(df_rec['RRI'], add = T)
layout(matrix(c(1, 2), 1, 2))
plot(st_geometry(br), axes = TRUE)
plot(df_rec['RRI'], add = T)
plot(st_geometry(br), axes = TRUE)
plot(df_rec['YrYr'], add = T)
# plot(meuse.pol, axes = TRUE) # default axes
# plot(meuse.pol, axes = FALSE) # with custom axes
# axis(1, at = c(178000 + 0:2 * 2000), cex.axis = 0.7)
# axis(2, at = c(326000 + 0:3 * 4000), cex.axis = 0.7)
box()
layout(matrix(c(2, 2), 2, 2))
layout(matrix(c(2, 2), 1, 2))
layout(matrix(c(2, 2), 1, 2))
layout(matrix(c(1, 2,3), 2, 2))
plot(st_geometry(br), axes = TRUE)
plot(df_rec['RRI'], add = T)
plot(st_geometry(br), axes = TRUE)
plot(df_rec['YrYr'], add = T)
plot(st_geometry(br), axes = TRUE)
plot(df_rec['R80p'], add = T)
layout(matrix(c(1, 2,3), 2, 2))
plot(st_geometry(br), axes = TRUE)
plot(df_rec['RRI'], add = T)
plot(st_geometry(br), axes = TRUE)
plot(df_rec['YrYr'], add = T)
plot(st_geometry(br), axes = TRUE)
plot(df_rec['R80P'], add = T)
layout(matrix(c(1, 2, 3), 2, 2))
plot(st_geometry(br), axes = TRUE)
plot(df_rec['RRI'], add = T)
plot(st_geometry(br), axes = TRUE)
plot(df_rec['YrYr'], add = T)
plot(st_geometry(br), axes = TRUE)
plot(df_rec['R80P'], add = T)
layout(matrix(c(1, 2), 2, 2))
plot(st_geometry(br), axes = TRUE)
plot(df_rec['RRI'], add = T)
plot(st_geometry(br), axes = TRUE)
plot(df_rec['YrYr'], add = T)
plot(st_geometry(br), axes = TRUE)
plot(df_rec['R80P'], add = T)
# pl
layout(matrix(c(1, 3, 2, 0), 2, 2))
plot(st_geometry(br), axes = TRUE)
plot(df_rec['RRI'], add = T)
plot(st_geometry(br), axes = TRUE)
plot(df_rec['YrYr'], add = T)
plot(st_geometry(br), axes = TRUE)
plot(df_rec['R80P'], add = T)
layout(matrix(c(1, 3, 2, 0), 2, 2))
plot(st_geometry(br), axes = TRUE, main = 'q')
plot(df_rec['RRI'], add = T)
plot(st_geometry(br), axes = TRUE)
plot(df_rec['YrYr'], add = T)
plot(st_geometry(br), axes = TRUE)
plot(df_rec['R80P'], add = T)
layout(matrix(c(1, 3, 2, 0), 2, 2))
plot(st_geometry(br), axes = TRUE, main = 'RRI')
plot(df_rec['RRI'], add = T)
plot(st_geometry(br), axes = TRUE, main = 'YrYr')
plot(df_rec['YrYr'], add = T)
plot(st_geometry(br), axes = TRUE, main = 'R80P')
plot(df_rec['R80P'], add = T)
layout(matrix(c(1, 3, 2, 0), 2, 2))
plot(st_geometry(br), axes = TRUE, main = 'RRI')
plot(df_rec['RRI'], add = T,
breaks = "quantile")
plot(st_geometry(br), axes = TRUE, main = 'YrYr')
plot(df_rec['YrYr'], add = T)
plot(st_geometry(br), axes = TRUE, main = 'R80P')
plot(df_rec['R80P'], add = T)
plot(st_geometry(br), axes = TRUE, main = 'RRI')
plot(df_rec['RRI'], add = T,
breaks = "quantile")
plot(st_geometry(br), axes = TRUE, main = 'RRI')
spplot(df_rec['RRI'], add = T,
breaks = "quantile")
ggplot() +
geom_sf(data = br, color = 'black')
ggplot() +
geom_sf(data = br, color = 'black')
ggplot() +
geom_sf(data = br, color = 'black') +
geom_sf(data = df_rec, color = 'RRI')
ggplot() +
geom_sf(data = br, color = 'black') +
geom_sf(data = df_rec,  aes(fill = RRI))
ggplot() +
geom_sf(data = br, color = 'black') +
geom_sf(data = df_rec,  aes(col = RRI, fill = RRI))
ggplot() +
geom_sf(data = br, color = 'black') +
geom_sf(data = df_rec[!is.na(df_rec$RRI),],  aes(col = RRI, fill = RRI))
ggplot() +
geom_sf(data = br, color = 'black') +
geom_sf(data = df_rec[!is.na(df_rec$R80P),],  aes(col = R80P, fill = R80P))
ggplot() +
geom_sf(data = br, color = 'black') +
geom_sf(data = df_rec[!is.na(df_rec$YrYr),],  aes(col = YrYr, fill = YrYr))
ggplot() +
geom_sf(data = br, color = 'black') +
geom_sf(data = df_rec[!is.na(df_rec$RRI),],  aes(col = RRI, fill = RRI))+
scale_fill_viridis_c(trans = "sqrt", alpha = .4)
ggplot() +
geom_sf(data = br, color = 'black') +
geom_sf(data = df_rec[!is.na(df_rec$RRI),],  aes(col = RRI, fill = RRI))+
scale_color_gradientn(colours = rainbow(5))
ggplot() +
geom_sf(data = br, color = 'black') +
geom_sf(data = df_rec[!is.na(df_rec$RRI),],  aes(col = RRI, fill = NA))+
scale_color_gradientn(colours = rainbow(5))
ggplot() +
geom_sf(data = br, color = 'black') +
geom_sf(data = df_rec[!is.na(df_rec$RRI),],  aes(col = NA, fill = RRI))+
scale_color_gradientn(colours = rainbow(5))
ggplot() +
geom_sf(data = br, color = 'black') +
geom_sf(data = df_rec[!is.na(df_rec$RRI),],  aes(col = NA, fill = RRI))+
scale_color_gradient(low="blue", high="red")
ggplot() +
geom_sf(data = br, color = 'black') +
geom_sf(data = df_rec[!is.na(df_rec$RRI),],  aes(col = NA, fill = RRI))
ggplot() +
geom_sf(data = br, color = 'black') +
geom_sf(data = df_rec[!is.na(df_rec$RRI),],  aes(col = RRI, fill = RRI))
id <- which(df_rec$YrYr == max(df_rec$YrYr, na.rm = T))
dat <- getPlotData(id)
plot_aux(dts, dat$obsi,id, dat$lossdt_start,dat$lossdt_end,dat$lossdt_start1,dat$lossdt_end1,
dat$trend,dat$met_rri,dat$met_r80p,dat$met_yryr)
id <- which(df_rec$YrYr == max(df_rec$YrYr, na.rm = T))
dat <- getPlotData(id)
plot_aux(dts, dat$obsi,id, dat$lossdt_start,dat$lossdt_end,dat$lossdt_start1,dat$lossdt_end1,
dat$trend,dat$met_rri,dat$met_r80p,dat$met_yryr)
names(df_out)[-c(1:5)]
dts <- as.Date(names(df_out)[-c(1:5)])
id <- which(df_rec$R80P == max(df_rec$R80P, na.rm = T))
dat <- getPlotData(id)
plot_aux(dts, dat$obsi,id, dat$lossdt_start,dat$lossdt_end,dat$lossdt_start1,dat$lossdt_end1,
dat$trend,dat$met_rri,dat$met_r80p,dat$met_yryr)
knitr::opts_chunk$set(echo = TRUE)
library(zoo)
library(GEE.aux)
library(tidyverse)
library(bfast)
library(strucchange)
library(sf)
library(raster)
library(ggplot2)
getPlotData <- function(id){
distyr <- as.numeric(df_out$lossyr[id])
lossdt_start <- as.Date(paste0(as.character(2000+distyr),'-01-01'))
lossdt_end <- as.Date(paste0(as.character(2000+distyr),'-12-31'))
lossdt_start1 <- as.Date(paste0(as.character(2000+distyr-1),'-01-01'))
lossdt_end1 <- as.Date(paste0(as.character(2000+distyr+1),'-12-31'))
obsi <- df_out[id,-c(1:5)]
trend <- seg[[id]]$trend
met_rri <- df_rec$RRI[id]
met_r80p <- df_rec$R80P[id]
met_yryr <- df_rec$YrYr[id]
out <- list(distyr, lossdt_start,lossdt_end,lossdt_start1,lossdt_end1,obsi,trend,met_rri,met_r80p,met_yryr)
names(out)<- c('distyr', 'lossdt_start','lossdt_end','lossdt_start1','lossdt_end1','obsi','trend','met_rri','met_r80p','met_yryr')
return(out)
}
id <- which(df_rec$RRI == max(df_rec$RRI, na.rm = T))
dat <- getPlotData(id)
plot_aux(dts, dat$obsi,id, dat$lossdt_start,dat$lossdt_end,dat$lossdt_start1,dat$lossdt_end1,
dat$trend,dat$met_rri,dat$met_r80p,dat$met_yryr)
# calculate recovery metrics
df_fr <- data.frame(do.call(rbind.data.frame, lapply(1:nts,function(i){
# get observation number of reported disturbance
dtdist <- as.Date(paste0(as.character(2000+as.numeric(df_out$lossyr[i])),'-06-01'))
tdist <- which(dts == dtdist)
# trend component of piecewise regression
tsi <- seg[[i]]$trend
# breakpoints of piecewise regression
tbp <- seg[[i]]$breakpoints
tbp <- tbp[tbp!=0 & tbp!=length(tsi)]
# calculate recovery metrics
calcRecMetrics(tsi, tdist, obspyr, nPre, nDist, nPost, nPostStart, nDelta, nDeltaStart,
tbp, maxBreak, chkBrk, timeThres)})))
# number of pixels to be processed
nts <- dim(df_out)[1]
# calculate recovery metrics
df_fr <- data.frame(do.call(rbind.data.frame, lapply(1:nts,function(i){
# get observation number of reported disturbance
dtdist <- as.Date(paste0(as.character(2000+as.numeric(df_out$lossyr[i])),'-06-01'))
tdist <- which(dts == dtdist)
# trend component of piecewise regression
tsi <- seg[[i]]$trend
# breakpoints of piecewise regression
tbp <- seg[[i]]$breakpoints
tbp <- tbp[tbp!=0 & tbp!=length(tsi)]
# calculate recovery metrics
calcRecMetrics(tsi, tdist, obspyr, nPre, nDist, nPost, nPostStart, nDelta, nDeltaStart,
tbp, maxBreak, chkBrk, timeThres)})))
document()
library(devtools)
document()
install()
# calculate recovery metrics
df_fr <- data.frame(do.call(rbind.data.frame, lapply(1:nts,function(i){
# get observation number of reported disturbance
dtdist <- as.Date(paste0(as.character(2000+as.numeric(df_out$lossyr[i])),'-06-01'))
tdist <- which(dts == dtdist)
# trend component of piecewise regression
tsi <- seg[[i]]$trend
# breakpoints of piecewise regression
tbp <- seg[[i]]$breakpoints
tbp <- tbp[tbp!=0 & tbp!=length(tsi)]
# calculate recovery metrics
calcRecMetrics(tsi, tdist, obspyr, nPre, nDist, nPost, nPostStart, nDelta, nDeltaStart,
tbp, maxBreak, chkBrk, timeThres)})))
# add auxiliary data to the dataframe
df_rec <- cbind(dat_tidy[,auxcols], df_fr)
df_rec <- cbind(df_out[,c(1:5)], df_fr)
# save result
save(df_rec, file = file.path(ifolder,  paste0('rec_', tools::file_path_sans_ext(ifile), '.Rdata')))
getPlotData <- function(id){
distyr <- as.numeric(df_out$lossyr[id])
lossdt_start <- as.Date(paste0(as.character(2000+distyr),'-01-01'))
lossdt_end <- as.Date(paste0(as.character(2000+distyr),'-12-31'))
lossdt_start1 <- as.Date(paste0(as.character(2000+distyr-1),'-01-01'))
lossdt_end1 <- as.Date(paste0(as.character(2000+distyr+1),'-12-31'))
obsi <- df_out[id,-c(1:5)]
trend <- seg[[id]]$trend
met_rri <- df_rec$RRI[id]
met_r80p <- df_rec$R80P[id]
met_yryr <- df_rec$YrYr[id]
out <- list(distyr, lossdt_start,lossdt_end,lossdt_start1,lossdt_end1,obsi,trend,met_rri,met_r80p,met_yryr)
names(out)<- c('distyr', 'lossdt_start','lossdt_end','lossdt_start1','lossdt_end1','obsi','trend','met_rri','met_r80p','met_yryr')
return(out)
}
id <- which(df_rec$RRI == max(df_rec$RRI, na.rm = T))
dat <- getPlotData(id)
plot_aux(dts, dat$obsi,id, dat$lossdt_start,dat$lossdt_end,dat$lossdt_start1,dat$lossdt_end1,
dat$trend,dat$met_rri,dat$met_r80p,dat$met_yryr)
id <- which(df_rec$RRI == max(df_rec$RRI, na.rm = T))
dat <- getPlotData(id)
plot_aux(dts, dat$obsi,id, dat$lossdt_start,dat$lossdt_end,dat$lossdt_start1,dat$lossdt_end1,
dat$trend,dat$met_rri,dat$met_r80p,dat$met_yryr)
RRI_vals <- df_rec$RRI[!is.na(df_rec$RRI)]
RRI_med <- RRI_vals[rank(RRI_vals) == floor(length(RRI_vals)/2)]
id <- which(df_rec$RRI == RRI_med)
dat <- getPlotData(id)
plot_aux(dts, dat$obsi,id, dat$lossdt_start,dat$lossdt_end,dat$lossdt_start1,dat$lossdt_end1,
dat$trend,dat$met_rri,dat$met_r80p,dat$met_yryr)
id <- which(df_rec$RRI == min(df_rec$RRI, na.rm = T))
dat <- getPlotData(id)
plot_aux(dts, dat$obsi,id, dat$lossdt_start,dat$lossdt_end,dat$lossdt_start1,dat$lossdt_end1,
dat$trend,dat$met_rri,dat$met_r80p,dat$met_yryr)
id <- which(df_rec$R80P == max(df_rec$R80P, na.rm = T))
dat <- getPlotData(id)
plot_aux(dts, dat$obsi,id, dat$lossdt_start,dat$lossdt_end,dat$lossdt_start1,dat$lossdt_end1,
dat$trend,dat$met_rri,dat$met_r80p,dat$met_yryr)
R80P_vals <- df_rec$R80P[!is.na(df_rec$R80P)]
R80P_med <- R80P_vals[rank(R80P_vals) == floor(length(R80P_vals)/2)]
id <- which(df_rec$R80P == R80P_med)
dat <- getPlotData(id)
plot_aux(dts, dat$obsi,id, dat$lossdt_start,dat$lossdt_end,dat$lossdt_start1,dat$lossdt_end1,
dat$trend,dat$met_rri,dat$met_r80p,dat$met_yryr)
id <- which(df_rec$R80P == min(df_rec$R80P, na.rm = T))
dat <- getPlotData(id)
plot_aux(dts, dat$obsi,id, dat$lossdt_start,dat$lossdt_end,dat$lossdt_start1,dat$lossdt_end1,
dat$trend,dat$met_rri,dat$met_r80p,dat$met_yryr)
id <- which(df_rec$YrYr == max(df_rec$YrYr, na.rm = T))
dat <- getPlotData(id)
plot_aux(dts, dat$obsi,id, dat$lossdt_start,dat$lossdt_end,dat$lossdt_start1,dat$lossdt_end1,
dat$trend,dat$met_rri,dat$met_r80p,dat$met_yryr)
YrYr_vals <- df_rec$YrYr[!is.na(df_rec$YrYr)]
YrYr_med <- YrYr_vals[rank(YrYr_vals) == floor(length(YrYr_vals)/2)]
id <- which(df_rec$YrYr == YrYr_med)
dat <- getPlotData(id)
plot_aux(dts, dat$obsi,id, dat$lossdt_start,dat$lossdt_end,dat$lossdt_start1,dat$lossdt_end1,
dat$trend,dat$met_rri,dat$met_r80p,dat$met_yryr)
id <- which(df_rec$YrYr == min(df_rec$YrYr, na.rm = T))
dat <- getPlotData(id)
plot_aux(dts, dat$obsi,id, dat$lossdt_start,dat$lossdt_end,dat$lossdt_start1,dat$lossdt_end1,
dat$trend,dat$met_rri,dat$met_r80p,dat$met_yryr)
which(!is.na(df_rec$RRI)
)
for (id in which(!is.na(df_rec$RRI))){
dat <- getPlotData(id)
plot_aux(dts, dat$obsi,id, dat$lossdt_start,dat$lossdt_end,dat$lossdt_start1,dat$lossdt_end1,
dat$trend,dat$met_rri,dat$met_r80p,dat$met_yryr)
}
